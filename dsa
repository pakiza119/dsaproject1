import java.util.*;

class Edge {
    int target, weight;
    
    Edge(int target, int weight) {
        this.target = target;
        this.weight = weight;
    }
}

class Graph {
    private final int V;
    private final List<List<Edge>> adj;

    Graph(int V) {
        this.V = V;
        adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
    }

    void addEdge(int source, int target, int weight) {
        adj.get(source).add(new Edge(target, weight));
    }

    List<Edge> getAdj(int node) {
        return adj.get(node);
    }

    int getV() {
        return V;
    }
}
2. Reading Graph Data from a File
import java.io.*;
import java.util.*;

public class GraphReader {
    public static Graph readGraphFromFile(String filename) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(filename));
        String line = br.readLine();
        int V = Integer.parseInt(line);
        Graph graph = new Graph(V);
        
        while ((line = br.readLine()) != null) {
            String[] parts = line.split(" ");
            int source = Integer.parseInt(parts[0]);
            int target = Integer.parseInt(parts[1]);
            int weight = Integer.parseInt(parts[2]);
            graph.addEdge(source, target, weight);
        }
        
        br.close();
        return graph;
    }
}
3. Implementing Shortest Path Algorithms
Dijkstra's Algorithm
import java.util.*;

public class Dijkstra {
    public static int[] dijkstra(Graph graph, int src) {
        int V = graph.getV();
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        PriorityQueue<Edge> pq = new PriorityQueue<>(Comparator.comparingInt(e -> e.weight));
        pq.add(new Edge(src, 0));
        
        while (!pq.isEmpty()) {
            Edge current = pq.poll();
            int u = current.target;
            for (Edge edge : graph.getAdj(u)) {
                int v = edge.target;
                int weight = edge.weight;
                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.add(new Edge(v, dist[v]));
                }
            }
        }
        return dist;
    }
}
Bellman-Ford Algorithm

java
Copy code
public class BellmanFord {
    public static int[] bellmanFord(Graph graph, int src) {
        int V = graph.getV();
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        
        for (int i = 1; i < V; ++i) {
            for (int u = 0; u < V; ++u) {
                for (Edge edge : graph.getAdj(u)) {
                    int v = edge.target;
                    int weight = edge.weight;
                    if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                        dist[v] = dist[u] + weight;
                    }
                }
            }
        }

        for (int u = 0; u < V; ++u) {
            for (Edge edge : graph.getAdj(u)) {
                int v = edge.target;
                int weight = edge.weight;
                if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                    System.out.println("Graph contains negative weight cycle");
                }
            }
        }
        
        return dist;
    }
}
4. Comparing Performance
public class CompareAlgorithms {
    public static void main(String[] args) {
        try {
            Graph graph = GraphReader.readGraphFromFile("graph.txt");
            int src = 0; // example source node
            
            // Measure time for Dijkstra's Algorithm
            long startTime = System.nanoTime();
            int[] dijkstraDist = Dijkstra.dijkstra(graph, src);
            long endTime = System.nanoTime();
            long dijkstraTime = endTime - startTime;
            
            // Measure time for Bellman-Ford Algorithm
            startTime = System.nanoTime();
            int[] bellmanFordDist = BellmanFord.bellmanFord(graph, src);
            endTime = System.nanoTime();
            long bellmanFordTime = endTime - startTime;
            
            // Print results
            System.out.println("Dijkstra's Algorithm:");
            for (int i = 0; i < dijkstraDist.length; i++) {
                System.out.println("Distance from node " + src + " to node " + i + " is " + dijkstraDist[i]);
            }
            System.out.println("Time taken by Dijkstra's Algorithm: " + dijkstraTime + " nanoseconds");
            
            System.out.println("\nBellman-Ford Algorithm:");
            for (int i = 0; i < bellmanFordDist.length; i++) {
                System.out.println("Distance from node " + src + " to node " + i + " is " + bellmanFordDist[i]);
            }
            System.out.println("Time taken by Bellman-Ford Algorithm: " + bellmanFordTime + " nanoseconds");
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
